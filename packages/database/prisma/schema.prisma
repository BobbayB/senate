generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String         @unique
  email         String
  voters        Voter[]
  subscriptions Subscription[]
  notifications Notification[]
}

model Voter {
  id            String        @id @default(cuid())
  address       String        @unique
  refreshStatus RefreshStatus
  lastRefresh   DateTime
  users         User[]
  votes         Vote[]
}

model DAO {
  id            String         @id @default(cuid())
  name          String         @unique
  picture       String
  refreshStatus RefreshStatus
  lastRefresh   DateTime
  handlers      DAOHandler[]
  proposals     Proposal[]
  subscriptions Subscription[]
  votes         Vote[]
}

model DAOHandler {
  id      String         @id @default(cuid())
  type    DAOHandlerType
  decoder Json
  daoId   String
  dao     DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)

  @@unique([daoId, type])
}

model Proposal {
  id            String         @id @default(cuid())
  externalId    String         @unique
  name          String
  daoId         String
  daoHandlerId  String
  proposalType  ProposalType
  data          Json
  timeCreated   DateTime
  timeStart     DateTime
  timeEnd       DateTime
  url           String
  dao           DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  votes         Vote[]
  notifications Notification[]
  addedAt       BigInt // timestamp

  @@unique([externalId, daoId])
  @@index([daoId], map: "Proposal_daoId_fkey")
}

// enum StatusType {
//     NOT_SENT
//     PENDING
//     SENT
// }

enum RoundupNotificationType {
  NEW
  ENDING_SOON
  VOTED
}

model Notification {
  id         String                  @id @default(cuid())
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  proposal   Proposal                @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String
  type       RoundupNotificationType

  @@unique([proposalId, userId, type])
}

model Vote {
  id           String       @id @default(cuid())
  voterAddress String
  proposalId   String
  daoId        String
  daoHandlerId String
  dao          DAO          @relation(fields: [daoId], references: [id], onDelete: Cascade)
  proposal     Proposal     @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  voter        Voter        @relation(fields: [voterAddress], references: [address], onDelete: Cascade)
  options      VoteOption[]
  addedAt      BigInt // timestamp

  @@unique([voterAddress, daoId, proposalId])
  @@index([daoId], map: "Vote_daoId_fkey")
  @@index([proposalId], map: "Vote_proposalId_fkey")
}

model VoteOption {
  id             String @id @default(cuid())
  option         String
  optionName     String
  voterAddress   String
  voteDaoId      String
  voteProposalId String
  vote           Vote   @relation(fields: [voterAddress, voteDaoId, voteProposalId], references: [voterAddress, daoId, proposalId], onDelete: Cascade)

  @@unique([voteProposalId, option])
  @@index([voterAddress, voteDaoId, voteProposalId], map: "VoteOption_voterAddress_voteDaoId_voteProposalId_fkey")
}

model VoterLatestVoteBlock {
  id              String @id @default(cuid())
  voterAddress    String
  daoHandlerId    String
  latestVoteBlock Int

  @@unique([voterAddress, daoHandlerId])
}

model Subscription {
  id     String @id @default(cuid())
  userId String
  daoId  String
  dao    DAO    @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, daoId])
  @@index([daoId], map: "Subscription_daoId_fkey")
}

enum DAOHandlerType {
  BRAVO1
  BRAVO2
  MAKER_EXECUTIVE
  MAKER_POLL_CREATE
  MAKER_POLL_VOTE
  SNAPSHOT
}

enum ProposalType {
  BRAVO
  MAKER_EXECUTIVE
  MAKER_POLL
  SNAPSHOT
}

enum RefreshStatus {
  NEW
  PENDING
  DONE
}
