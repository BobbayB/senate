generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id            String         @id @default(cuid())
  newUser       Boolean        @default(true)
  acceptedTerms Boolean        @default(false)
  name          String         @unique
  email         String         @default("")
  lastActive    DateTime       @default(now())
  sessionCount  Int            @default(0)
  notifications Notification[]
  subscriptions Subscription[]
  userSettings  UserSettings?
  voters        Voter[]        @relation("UserToVoter")
}

model UserSettings {
  id                 String  @id @default(cuid())
  userId             String  @unique
  dailyBulletinEmail Boolean @default(true)
  user               User    @relation(fields: [userId], references: [id])
}

model Voter {
  id            String         @id @default(cuid())
  address       String         @unique
  votes         Vote[]
  voterHandlers VoterHandler[]
  users         User[]         @relation("UserToVoter")
}

model DAO {
  id            String         @id @default(cuid())
  name          String         @unique
  picture       String
  handlers      DAOHandler[]
  proposals     Proposal[]
  subscriptions Subscription[]
  votes         Vote[]
}

model DAOHandler {
  id                                   String         @id @default(cuid())
  type                                 DAOHandlerType
  decoder                              Json
  lastChainProposalCreatedBlock        BigInt?        @default(0)
  lastSnapshotProposalCreatedTimestamp DateTime?      @default(dbgenerated("(from_unixtime(0))"))
  lastRefreshTimestamp                 DateTime       @default(dbgenerated("(from_unixtime(0))"))
  refreshStatus                        RefreshStatus  @default(NEW)
  daoId                                String
  dao                                  DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  proposals                            Proposal[]
  voterHandlers                        VoterHandler[]

  @@unique([daoId, type])
}

model Proposal {
  id            String         @id @default(cuid())
  externalId    String
  name          String         @db.VarChar(2048)
  daoId         String
  daoHandlerId  String
  data          Json
  timeCreated   DateTime
  timeStart     DateTime
  timeEnd       DateTime
  url           String         @db.VarChar(1024)
  notifications Notification[]
  daoHandler    DAOHandler     @relation(fields: [daoHandlerId], references: [id], onDelete: Cascade)
  dao           DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  votes         Vote[]

  @@unique([externalId, daoId])
  @@index([daoId])
  @@index([daoHandlerId])
}

model Notification {
  id         String                  @id @default(cuid())
  userId     String
  proposalId String
  daoId      String
  type       RoundupNotificationType
  proposal   Proposal                @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proposalId, userId, type])
  @@index([userId])
  @@index([proposalId])
}

model Vote {
  id           String   @id @default(cuid())
  voterAddress String
  proposalId   String
  daoId        String
  daoHandlerId String
  choiceId     String   @default("0")
  choice       String   @default("None")
  dao          DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  proposal     Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  voter        Voter    @relation(fields: [voterAddress], references: [address], onDelete: Cascade)

  @@unique([voterAddress, daoId, proposalId])
  @@index([proposalId])
  @@index([daoId])
}

model VoterHandler {
  id                               String        @id @default(cuid())
  voterId                          String
  daoHandlerId                     String
  refreshStatus                    RefreshStatus @default(NEW)
  lastRefreshTimestamp             DateTime      @default(dbgenerated("(from_unixtime(0))"))
  lastChainVoteCreatedBlock        BigInt?       @default(0)
  lastSnapshotVoteCreatedTimestamp DateTime?     @default(dbgenerated("(from_unixtime(0))"))
  daoHandler                       DAOHandler    @relation(fields: [daoHandlerId], references: [id], onDelete: Cascade)
  voter                            Voter         @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([voterId, daoHandlerId])
  @@index([daoHandlerId])
}

model Subscription {
  id                   String  @id @default(cuid())
  userId               String
  daoId                String
  notificationsEnabled Boolean @default(true)
  dao                  DAO     @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, daoId])
  @@index([daoId])
}

model RefreshQueue {
  id          String      @id @default(cuid())
  refreshType RefreshType
  clientId    String
  priority    BigInt
}

model Config {
  param String @unique
  value String
}

enum RoundupNotificationType {
  NEW
  ENDING_SOON
  PAST
}

enum DAOHandlerType {
  AAVE_CHAIN
  COMPOUND_CHAIN
  UNISWAP_CHAIN
  MAKER_EXECUTIVE
  MAKER_POLL_CREATE
  MAKER_POLL_VOTE
  SNAPSHOT
}

enum RefreshStatus {
  NEW
  PENDING
  DONE
}

enum RefreshType {
  DAOCHAINPROPOSALS
  DAOSNAPSHOTPROPOSALS
  DAOCHAINVOTES
  DAOSNAPSHOTVOTES
  VOTERCHAINVOTES
  VOTERSNAPSHOTVOTES
}
