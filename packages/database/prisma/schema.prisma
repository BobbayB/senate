// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["interactiveTransactions"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(cuid())
    address       String         @unique
    subscriptions Subscription[]
    votes         Vote[]
}

model DAO {
    id            String         @id @default(cuid())
    name          String         @unique
    picture       String
    handlers      DAOHandler[]
    subscriptions Subscription[]
    proposals     Proposal[]
    votes         Vote[]
}

model DAOHandler {
    id      String         @id @default(cuid())
    type    DAOHandlerType
    decoder Json
    dao     DAO            @relation(fields: [daoId], references: [id])
    daoId   String
}

enum DAOHandlerType {
    BRAVO1
    BRAVO2
    MAKER_PROPOSAL
    MAKER_POLL
    SNAPSHOT
}

model Proposal {
    id           String @id @default(cuid())
    name         String
    description  String
    dao          DAO    @relation(fields: [daoId], references: [id])
    daoId        String
    daoHandlerId String
    votes        Vote[]
}

model Vote {
    id           String       @id @default(cuid())
    options      VoteOption[]
    user         User         @relation(fields: [userId], references: [id])
    userId       String
    proposal     Proposal     @relation(fields: [proposalId], references: [id])
    proposalId   String
    dao          DAO          @relation(fields: [daoId], references: [id])
    daoId        String
    daoHandlerId String
}

model VoteOption {
    option     String
    optionName String
    Vote       Vote   @relation(fields: [voteId], references: [id])
    voteId     String

    @@id([option, optionName, voteId])
}

model Subscription {
    id   String @id @default(cuid())
    user User   @relation(fields: [userId], references: [id])
    dao  DAO    @relation(fields: [daoId], references: [id])

    userId String
    daoId  String
}
