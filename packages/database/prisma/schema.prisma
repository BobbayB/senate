// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @unique @default(cuid())
    address       String         @unique
    subscriptions Subscription[]
    votes         Vote[]
}

model DAO {
    id            String         @id @unique @default(cuid())
    name          String         @unique
    picture       String
    handlers      DAOHandler[]
    subscriptions Subscription[]
    proposals     Proposal[]
    votes         Vote[]
}

model DAOHandler {
    id      String         @unique @default(cuid())
    type    DAOHandlerType
    decoder Json
    dao     DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)
    daoId   String

    @@id([daoId, type])
}

enum DAOHandlerType {
    BRAVO1
    BRAVO2
    MAKER_PROPOSAL
    MAKER_POLL
    SNAPSHOT
}

model Proposal {
    id           String @unique @default(cuid())
    externalId   String @unique
    name         String
    description  String
    dao          DAO    @relation(fields: [daoId], references: [id], onDelete: Cascade)
    daoId        String
    daoHandlerId String
    votes        Vote[]

    @@id([externalId, daoId])
}

model Vote {
    id           String       @unique @default(cuid())
    options      VoteOption[]
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    proposal     Proposal     @relation(fields: [proposalId], references: [id], onDelete: Cascade)
    proposalId   String
    dao          DAO          @relation(fields: [daoId], references: [id], onDelete: Cascade)
    daoId        String
    daoHandlerId String

    @@id([userId, daoId, proposalId])
}

model VoteOption {
    id         String @unique @default(cuid())
    option     String
    optionName String

    vote           Vote   @relation(fields: [voteUserId, voteDaoId, voteProposalId], references: [userId, daoId, proposalId], onDelete: Cascade)
    voteUserId     String
    voteDaoId      String
    voteProposalId String

    @@id([voteProposalId, option])
}

model Subscription {
    id String @unique @default(cuid())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    dao  DAO  @relation(fields: [daoId], references: [id], onDelete: Cascade)

    userId String
    daoId  String

    @@id([userId, daoId])
}
