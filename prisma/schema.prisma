// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model User {
  id             Int             @id @default(autoincrement())
  address        String          @unique
  proxyContracts ProxyContract[]
  subscriptions  Subscription[]
  userVote       UserVote[]
}

model ProxyContract {
  id      Int    @id @default(autoincrement())
  address String
  User    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int?
}

model Dao {
  id            Int            @id @default(autoincrement())
  name          String         @default("No name")
  picture       String         @default("https://via.placeholder.com/200x200")
  address       String //contract address used for on chain proposals
  snapshotSpace String //snapshot space address used for snapshot proposals
  abi           String
  latestBlock   Int //used for chain proposals fetching
  proposalUrl   String
  Subscription  Subscription[]
  Proposal      Proposal[]
}

model Subscription {
  id                   Int                   @id @default(autoincrement())
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               Int
  Dao                  Dao                   @relation(fields: [daoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  daoId                Int
  notificationChannels NotificationChannel[]
  notificationSettings NotificationSetting[]
}

model NotificationChannel {
  id             Int          @id @default(autoincrement())
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId Int
  type           Int
  connector      String
}

model NotificationSetting {
  id             Int          @id @default(autoincrement())
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId Int
  createdTime    DateTime     @default(now())
  delay          Int
}

model Proposal {
  id          Int        @id @default(autoincrement())
  dao         Dao        @relation(fields: [daoId], references: [id], onDelete: Cascade)
  daoId       Int
  type        Int
  snapshotId  String     @unique @default(cuid()) //used for snapshot proposal fetching uniqueness
  title       String
  description String
  created     DateTime
  voteStarts  DateTime
  voteEnds    DateTime
  url         String
  userVote    UserVote[]
}

model UserVote {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId Int
  snapshotId String   @unique @default(cuid()) //used for snapshot votes fetching uniqueness
  voteOption Int
  voteName   String
}
